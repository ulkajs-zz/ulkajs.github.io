<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{% values.frontMatter.title %} | {% info.configs.siteMetaData.title %}</title>
    <link rel="shortcut icon" href="/logo.png" type="image/x-icon" />
    <link rel="stylesheet" href="{% $assets('../styles/style.css') %}" />
    <link rel="stylesheet" href="{% $assets('../styles/highlight.css') %}" />
    <style>
      footer {
        text-align: center;
        min-height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--heavy-background-color);
        color: var(--text-color)
      }
     
      .prev-next {
        display: flex;
        margin-top: 40px;
        justify-content: space-between;
      }

      .prev-next a {
        display: block;
        background: var(--heavy-background-color);
        padding: 10px;
        border-radius: 5px;
        border: 0.5px solid rgba(0,0,0,0.5);
      }

      .sub-links {
        margin-left: 15px;
      }

      .sub-links a {
        font-weight: 400;
        font-size: 16px;
        display: inline;
      }

      .edit-on-github {
        margin-top: 20px;
        background: var(--heavy-background-color);
        padding: 10px;
        border-radius: 5px;
        display: flex;
        align-items: center;
        width: fit-content;
        border: 0.5px solid rgba(0,0,0,0.5);
      }

    </style>
  </head>

  <body class="light">
   {% $import('../partials/nav.ulka', {path: `/${name}`}) %}
    <main class="sidebar-main">
     <div class="sidebar">
      {% const curContent = contents[name] %}
        {% 
         [...curContent]
            .sort((a, b) => a.values.frontMatter.page - b.values.frontMatter.page)
            .map(content => `
            <div class="sidebar-main-link">
              <a ${content.link === link ? "class = 'active'": ""} href="${content.link}">${content.values.frontMatter.title}</a>
              ${content.link === link ? `
                <div class="sub-links">
                ${
                content.values.frontMatter.links
                
                ? content.values.frontMatter.links
                  .map(l => `<a href="${l.link}">> ${l.title}</a>`)
                  .join('<br />')
                : ""

                }
                </div>
              `: ""}
            </div>
          `)
        %}
      </div>
      <div class="content">
        <div class="container">
          <div>
            <h1 style="padding: 20px 0;">{% values.frontMatter.title %}</h1>
          {% data %}
           <a class="edit-on-github" target="__blank" href="https://github.com/ulkajs/ulkajs.github.io/tree/main/{% source %}"><svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" class="css-9u48bm" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"></path></svg>&nbsp;
          <span>Edit this page on github</span>
           </a>
          </div>
          <div class="prev-next">
            {% 
              const prev = contents[name].filter(d => d.values.frontMatter.page === values.frontMatter.page - 1)[0]
              const next = contents[name].filter(d => d.values.frontMatter.page === values.frontMatter.page + 1)[0]
            %}
            {% prev ? `<p><a href="${prev.link}">&lt; ${prev.values.frontMatter.title}</a></p>`: "<p></p>" %}
            {% next ? `<p><a href="${next.link}">${next.values.frontMatter.title} &gt;</a></p>`: "<p></p>" %}
          </div>
        </div>
        {% $import('../partials/footer.ulka') %}
      </div>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.2.1/highlight.min.js" integrity="sha512-Ypjm0o7jOxAd4hpdoppSEN0TQOC19UtPAqD+4s5AlXmUvbmmS/YMxYqAqarQYyxTnB6/rqip9qcxlNB/3U9Wdg==" crossorigin="anonymous"></script>
  
    <script>
      document.addEventListener('DOMContentLoaded', (event) => {
        document.querySelectorAll('pre code').forEach((block) => {
          if(!hljs) return
          hljs.registerLanguage('ulka', highlightUlka);
          hljs.highlightBlock(block);
        });
      });

      function highlightUlka(e) {
        return {
          name: "ulka",
          aliases: ["ulka"],
          subLanguage: ["xml"],
          contains: [
            e.C_LINE_COMMENT_MODE,
            e.C_BLOCK_COMMENT_MODE,
            {
              className: "ulka",
              begin: "\{%",
              end: "%}",
              subLanguage: ["javascript"],
            },
          ]
        }
      }
      
    </script> 

    <script>
      const toggle = document.querySelector('.toggle-mode')

      function findTheme(){
        let theme = localStorage.getItem('theme')
        return ["dark", "light"].includes(theme) ? theme : "light"
      }

      function setTheme(theme){
        document.body.className = theme
        toggle.textContent = theme === "light" ? "ðŸŒ™" : "ðŸŒ•"
        localStorage.setItem("theme", theme)
      }

      function toggleTheme(){
        const theme = findTheme()
        const newTheme = theme === "light" ? "dark" : "light"
        setTheme(newTheme)
      }

      setTheme(findTheme())
    </script>
  </body>
</html>
